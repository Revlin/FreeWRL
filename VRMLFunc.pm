
# VRMLFunc.pm, generated by VRMLC.pm. DO NOT MODIFY, MODIFY VRMLC.pm INSTEAD
package VRML::VRMLFunc;
require DynaLoader;
@ISA=DynaLoader;
bootstrap VRML::VRMLFunc;
sub load_data {
	my $n = \%VRML::CNodes;
 {
		my $s = '';
		my $v = get_PointLight_offsets($s);
		@{$n->{PointLight}{Offs}}{"radius","location","direction","attenuation","on","color","ambientIntensity","intensity","_end_"} =
			unpack("i*",$s);
		$n->{PointLight}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_DirectionalLight_offsets($s);
		@{$n->{DirectionalLight}{Offs}}{"direction","on","ambientIntensity","color","intensity","_end_"} =
			unpack("i*",$s);
		$n->{DirectionalLight}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Sphere_offsets($s);
		@{$n->{Sphere}{Offs}}{"radius","_end_"} =
			unpack("i*",$s);
		$n->{Sphere}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Coordinate_offsets($s);
		@{$n->{Coordinate}{Offs}}{"point","_end_"} =
			unpack("i*",$s);
		$n->{Coordinate}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_FontStyle_offsets($s);
		@{$n->{FontStyle}{Offs}}{"style","family","language","spacing","horizontal","topToBottom","size","leftToRight","justify","_end_"} =
			unpack("i*",$s);
		$n->{FontStyle}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Normal_offsets($s);
		@{$n->{Normal}{Offs}}{"vector","_end_"} =
			unpack("i*",$s);
		$n->{Normal}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Box_offsets($s);
		@{$n->{Box}{Offs}}{"size","_end_"} =
			unpack("i*",$s);
		$n->{Box}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Billboard_offsets($s);
		@{$n->{Billboard}{Offs}}{"children","axisOfRotation","bboxCenter","bboxSize","_end_"} =
			unpack("i*",$s);
		$n->{Billboard}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_ElevationGrid_offsets($s);
		@{$n->{ElevationGrid}{Offs}}{"zDimension","colorPerVertex","height","normal","creaseAngle","solid","xSpacing","xDimension","normalPerVertex","color","zSpacing","_end_"} =
			unpack("i*",$s);
		$n->{ElevationGrid}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Extrusion_offsets($s);
		@{$n->{Extrusion}{Offs}}{"convex","scale","beginCap","creaseAngle","solid","endCap","orientation","ccw","crossSection","spine","_end_"} =
			unpack("i*",$s);
		$n->{Extrusion}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Switch_offsets($s);
		@{$n->{Switch}{Offs}}{"choice","whichChoice","_end_"} =
			unpack("i*",$s);
		$n->{Switch}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_ImageTexture_offsets($s);
		@{$n->{ImageTexture}{Offs}}{"__data","url","__depth","repeatS","repeatT","__x","__y","_end_"} =
			unpack("i*",$s);
		$n->{ImageTexture}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_TextureCoordinate_offsets($s);
		@{$n->{TextureCoordinate}{Offs}}{"point","_end_"} =
			unpack("i*",$s);
		$n->{TextureCoordinate}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_IndexedFaceSet_offsets($s);
		@{$n->{IndexedFaceSet}{Offs}}{"texCoordIndex","normalIndex","convex","colorPerVertex","coord","colorIndex","texCoord","normal","creaseAngle","solid","ccw","coordIndex","color","_end_"} =
			unpack("i*",$s);
		$n->{IndexedFaceSet}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Background_offsets($s);
		@{$n->{Background}{Offs}}{"__y_left","__data_left","__depth_back","backUrl","__depth_top","topUrl","__y_back","__depth_bottom","__data_back","__x_top","bottomUrl","__y_top","__y_bottom","bindTime","__data_bottom","__depth_right","__x_right","isBound","__y_right","groundAngle","skyColor","__data_front","__x_left","__x_back","set_bind","__data_top","__x_bottom","groundColor","rightUrl","__data_right","__depth_front","frontUrl","__depth_left","leftUrl","skyAngle","__x_front","__y_front","_end_"} =
			unpack("i*",$s);
		$n->{Background}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Text_offsets($s);
		@{$n->{Text}{Offs}}{"fontStyle","__rendersub","length","maxExtent","string","_end_"} =
			unpack("i*",$s);
		$n->{Text}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Cone_offsets($s);
		@{$n->{Cone}{Offs}}{"height","bottomRadius","side","bottom","_end_"} =
			unpack("i*",$s);
		$n->{Cone}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Viewpoint_offsets($s);
		@{$n->{Viewpoint}{Offs}}{"fieldOfView","description","isBound","position","set_bind","bindTime","jump","orientation","_end_"} =
			unpack("i*",$s);
		$n->{Viewpoint}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_TextureTransform_offsets($s);
		@{$n->{TextureTransform}{Offs}}{"rotation","scale","center","translation","_end_"} =
			unpack("i*",$s);
		$n->{TextureTransform}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Group_offsets($s);
		@{$n->{Group}{Offs}}{"children","bboxCenter","bboxSize","_end_"} =
			unpack("i*",$s);
		$n->{Group}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_ProximitySensor_offsets($s);
		@{$n->{ProximitySensor}{Offs}}{"center","__hit","__t1","__t2","orientation_changed","isActive","exitTime","size","enabled","enterTime","position_changed","_end_"} =
			unpack("i*",$s);
		$n->{ProximitySensor}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Material_offsets($s);
		@{$n->{Material}{Offs}}{"transparency","emissiveColor","shininess","diffuseColor","specularColor","ambientIntensity","_end_"} =
			unpack("i*",$s);
		$n->{Material}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Appearance_offsets($s);
		@{$n->{Appearance}{Offs}}{"texture","textureTransform","material","_end_"} =
			unpack("i*",$s);
		$n->{Appearance}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Shape_offsets($s);
		@{$n->{Shape}{Offs}}{"appearance","geometry","_end_"} =
			unpack("i*",$s);
		$n->{Shape}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_IndexedLineSet_offsets($s);
		@{$n->{IndexedLineSet}{Offs}}{"colorPerVertex","coord","color","colorIndex","coordIndex","_end_"} =
			unpack("i*",$s);
		$n->{IndexedLineSet}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_PointSet_offsets($s);
		@{$n->{PointSet}{Offs}}{"color","coord","_end_"} =
			unpack("i*",$s);
		$n->{PointSet}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Cylinder_offsets($s);
		@{$n->{Cylinder}{Offs}}{"radius","height","top","side","bottom","_end_"} =
			unpack("i*",$s);
		$n->{Cylinder}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Anchor_offsets($s);
		@{$n->{Anchor}{Offs}}{"children","parameter","url","description","bboxCenter","bboxSize","_end_"} =
			unpack("i*",$s);
		$n->{Anchor}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Transform_offsets($s);
		@{$n->{Transform}{Offs}}{"rotation","center","scaleOrientation","bboxSize","scale","children","bboxCenter","translation","_end_"} =
			unpack("i*",$s);
		$n->{Transform}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_SpotLight_offsets($s);
		@{$n->{SpotLight}{Offs}}{"direction","beamWidth","ambientIntensity","intensity","radius","location","attenuation","on","cutOffAngle","color","_end_"} =
			unpack("i*",$s);
		$n->{SpotLight}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_LOD_offsets($s);
		@{$n->{LOD}{Offs}}{"level","center","range","_end_"} =
			unpack("i*",$s);
		$n->{LOD}{Virt} = $v;
 }
	 {
		my $s = '';
		my $v = get_Color_offsets($s);
		@{$n->{Color}{Offs}}{"color","_end_"} =
			unpack("i*",$s);
		$n->{Color}{Virt} = $v;
 }
	
}
